// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;

import frc.robot.Constants;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

public class DriveSubsystem extends SubsystemBase {
    private WPI_TalonSRX leftFront, leftBack, rightFront, rightBack;
    private SpeedControllerGroup left, right, falcons;
    private DifferentialDrive drive;
    private WPI_TalonFX falcon1, falcon2;

    
    public DriveSubsystem() {
        leftFront = new WPI_TalonSRX(Constants.leftFrontCAN);
        leftBack = new WPI_TalonSRX(Constants.leftBackCAN);
        rightFront = new WPI_TalonSRX(Constants.rightFrontCAN);
        rightBack = new WPI_TalonSRX(Constants.rightBackCAN);
        falcon1 = new WPI_TalonFX(Constants.falcon1CAN);
        falcon2 = new WPI_TalonFX(Constants.falcon2CAN);

        left = new SpeedControllerGroup(leftFront, leftBack);
        right = new SpeedControllerGroup(rightFront, rightBack);
        falcons = new SpeedControllerGroup(falcon1, falcon2);
        drive = new DifferentialDrive(left, right);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void tankDrive(double leftSpeed, double rightSpeed) { 
        drive.tankDrive(leftSpeed, rightSpeed);
    }

    public void setLeft(double speed) {
        left.set(speed);
        drive.feed();
    }

    public void setRight(double speed) {
        right.set(speed);
        drive.feed();
    }

    public void setFalcons(double speed) {
        falcons.set(speed);
    }

    public void stop() {
        drive.stopMotor();
        drive.feed();
    }
}

